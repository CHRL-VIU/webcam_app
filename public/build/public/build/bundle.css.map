{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../Geocoder.svelte",
    "../../Map.svelte",
    "../../Image.svelte",
    "../../Images.svelte"
  ],
  "sourcesContent": [
    "<div bind:this={container} id={fieldId} />\n\n<script>\n  import { onMount, createEventDispatcher } from 'svelte'\n  import loader from '@beyonk/async-script-loader'\n\n  const dispatch = createEventDispatcher()\n\n  const fieldId = 'bsm-' + Math.random().toString(36).substring(6)\n\n  export let accessToken\n  export let options = {}\n  export let version = 'v4.5.1'\n  export let types = [ 'country', 'region', 'postcode', 'district', 'place', 'locality', 'neighborhood', 'address' ]\n  export let placeholder = 'Search'\n  export let value = null\n\n  export let geocoder = null\n\n  let container\n  let ready = false\n\n  const onResult = p => dispatch('result', p)\n  const onResults = p => dispatch('results', p)\n  const onError = p => dispatch('error', p)\n  const onLoading = p => dispatch('loading', p)\n  const onClear = p => dispatch('clear', p)\n\n  onMount(() => {\n    loader([\n      { type: 'script', url: `//api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/${version}/mapbox-gl-geocoder.min.js` },\n      { type: 'style', url: `//api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/${version}/mapbox-gl-geocoder.css` }\n    ],\n    () => !!window.MapboxGeocoder,\n    onAvailable\n    )\n\n    return () => {\n      geocoder\n        .off('results', onResults)\n        .off('result', onResult)\n        .off('loading', onLoading)\n        .off('error', onError)\n        .off('clear', onClear)\n    }\n  })\n\n  function onAvailable () {\n    const optionsWithDefaults = Object.assign({\n      accessToken,\n      types: types.join(','),\n      placeholder\n    }, options)\n    geocoder = new window.MapboxGeocoder(optionsWithDefaults)\n    geocoder.addTo(`#${fieldId}`)\n  \n    geocoder\n      .on('results', onResults)\n      .on('result', onResult)\n      .on('loading', onLoading)\n      .on('error', onError)\n      .on('clear', onClear)\n\n    geocoder.setInput(value)\n\n    ready = true\n    dispatch('ready')\n  }\n\n  $: ready && value && geocoder.setInput(value)\n</script>\n\n<style>\n  div {\n    padding: 0;\n  }\n</style>",
    "<div bind:this={container}>\n  {#if map}\n  <slot></slot>\n  {/if}\n</div>\n\n<style>\n  div {\n    width: 100%;\n    height: 100%;\n  }\n</style>\n\n<script>\n  import loader from '@beyonk/async-script-loader'\n  import { onMount, createEventDispatcher, setContext } from 'svelte'\n  import { contextKey } from './mapbox.js'\n  import { EventQueue } from './queue.js'\n\n  setContext(contextKey, {\n    getMap: () => map,\n    getMapbox: () => mapbox\n  })\n\n  const dispatch = createEventDispatcher()\n\n  export let map = null\n  export let version = 'v1.11.0'\n\n  let container\n  let mapbox\n  let queue\n\n  export let options = {}\n  export let accessToken\n  export let style = 'mapbox://styles/mapbox/streets-v11'\n\n  export function setCenter (center, zoom) {\n    queue.send('setCenter', [ center ])\n    if (zoom && Number.isInteger(zoom)) {\n      queue.send('setZoom', [ zoom ])\n    }\n  }\n  export function fitBounds (bbox) {\n    queue.send('fitBounds', [ bbox ])\n  }\n\n  export function flyTo (destination) {\n    queue.send('flyTo', [ destination ])\n  }\n\n  export function resize () {\n    queue.send('resize')\n  }\n\n  export function getMap () {\n    return map\n  }\n\n  export function getMapbox () {\n    return mapbox\n  }\n\n  function onAvailable () {\n    window.mapboxgl.accessToken = accessToken\n    mapbox = window.mapboxgl\n    const optionsWithDefaults = Object.assign({\n      container,\n      style\n    }, options)\n\n    const el = new mapbox.Map(optionsWithDefaults)\n\n    el.on('dragend', () => dispatch('recentre', { center: el.getCenter() }))\n\n    el.on('load', () => {\n      map = el\n      queue.start()\n      dispatch('ready')\n    })\n  }\n\nfunction worker (cmd, cb) {\n    const [ command, params ] = cmd\n    map[command].apply(map, params)\n    cb(null)\n  }\n\n  onMount(async () => {\n    queue = new EventQueue(worker)\n\n    loader([\n      { type: 'script', url: `//api.mapbox.com/mapbox-gl-js/${version}/mapbox-gl.js` },\n      { type: 'style', url: `//api.mapbox.com/mapbox-gl-js/${version}/mapbox-gl.css` }\n    ],\n    () => !!window.mapboxgl,\n    onAvailable\n    )\n\n    return () => {\n      queue.stop()\n      map.remove()\n    }\n  })\n</script>\n",
    "<script>\nexport let image = {}\nconst imgPath = 'https://www.viu-hydromet-wx.ca/webcam_images/'\n\n</script>\n\n  <img src=\"{imgPath}{image}\" alt=\"slideshow\"/>\n\n\n<style>\n    img {\n                max-width: 100%;\n                max-height: inherit;\n    }\n</style>\n",
    "<script>\n  import { images, numImages, slide_id } from \"./data-images.js\";\n  import { onMount } from \"svelte\";\n  import Image from \"./Image.svelte\";\n  import { Map, Marker } from \"@beyonk/svelte-mapbox\";\n  import {accessToken} from \"./consts\";\n  import {listItems} from \"./wx-coords\";\n\n  let mapComponent;\n  let currentCam = \"Plummer Hut\";\n  let curDate =\"\";\n  let curTime =\"\";\n  let curDateTime =\"\";\n  let curElevation=\"\";\n  let curCoords=\"\";\n  // let reactDateTime = [$images[$slide_id].slice(-18, -14), $images[$slide_id].slice(-14, -12), $images[$slide_id].slice(-12, -10)].join(\"-\");\n\n  function onReady() {\n    mapComponent.setCenter([-126,53.5], 4);\n  }\n\n  // functions for next and previous buttons\n  function prevImage() {\n    if ($slide_id > 0) {\n      $slide_id--;\n    }\n  }\n  function nextImage() {\n    if ($slide_id < $numImages) {\n      $slide_id++;\n    }\n  }\n\n  // initiate reactive functions for each station\n  onMount(async () => {\n    const url =\n      \"https://www.viu-hydromet-wx.ca/webcam_images/get-images-variable.php?stnName=plummer\";\n    let res = await fetch(url);\n    res = await res.json();\n    $images = res;\n    $numImages = res.length - 1;\n    $slide_id = $numImages;\n    currentCam = \"Plummer Hut\";\n    curDate = [$images[$slide_id].slice(-18, -14), $images[$slide_id].slice(-14, -12), $images[$slide_id].slice(-12, -10)].join(\"-\");\n    curTime = [$images[$slide_id].slice(-10, -8), $images[$slide_id].slice(-8, -6), $images[$slide_id].slice(-6, -4),].join(\":\");\n    curDateTime = [curDate, curTime, \"UTC\"].join(\" \");\n    curElevation = [listItems[0].elevation, \" m\"].join(\"\");\n    curCoords = listItems[0].coords;\n  });\n\n  async function plum() {\n    const url =\n      \"https://www.viu-hydromet-wx.ca/webcam_images/get-images-variable.php?stnName=plummer\";\n    let res = await fetch(url);\n    res = await res.json();\n    $images = res;\n    $numImages = res.length - 1;\n    $slide_id = $numImages;\n    mapComponent.setCenter(listItems[0].coords, 9);\n    currentCam = \"Plummer Hut\";\n    curDate = [$images[$slide_id].slice(-18, -14), $images[$slide_id].slice(-14, -12), $images[$slide_id].slice(-12, -10)].join(\"-\");\n    curTime = [$images[$slide_id].slice(-10, -8), $images[$slide_id].slice(-8, -6), $images[$slide_id].slice(-6, -4)].join(\":\");\n    curDateTime = [curDate, curTime, \"UTC\"].join(\" \");\n    curElevation = [listItems[0].elevation, \" m\"].join(\"\");\n    curCoords = listItems[0].coords;\n  }\n  async function klina() {\n    const url =\n      \"https://www.viu-hydromet-wx.ca/webcam_images/get-images-variable.php?stnName=klinaklini\";\n    let res = await fetch(url);\n    res = await res.json();\n    $images = res;\n    $numImages = res.length - 1;\n    $slide_id = $numImages;\n    mapComponent.setCenter(listItems[1].coords, 9);\n    currentCam = \"Klinaklini\";\n    curDate = [$images[$slide_id].slice(-18, -14), $images[$slide_id].slice(-14, -12), $images[$slide_id].slice(-12, -10)].join(\"-\");\n    curTime = [$images[$slide_id].slice(-10, -8), $images[$slide_id].slice(-8, -6), $images[$slide_id].slice(-6, -4)].join(\":\");\n    curDateTime = [curDate, curTime, \"UTC\"].join(\" \");\n    curElevation = [listItems[1].elevation, \" m\"].join(\"\");\n    curCoords = listItems[1].coords\n  }\n  async function homath() {\n    const url =\n      \"https://www.viu-hydromet-wx.ca/webcam_images/get-images-variable.php?stnName=homathko\";\n    let res = await fetch(url);\n    res = await res.json();\n    $images = res;\n    $numImages = res.length - 1;\n    $slide_id = $numImages;\n    mapComponent.setCenter(listItems[2].coords, 9);\n    currentCam = \"Homathko\";\n    curDate = [$images[$slide_id].slice(-18, -14), $images[$slide_id].slice(-14, -12), $images[$slide_id].slice(-12, -10)].join(\"-\");\n    curTime = [$images[$slide_id].slice(-10, -8), $images[$slide_id].slice(-8, -6), $images[$slide_id].slice(-6, -4)].join(\":\");\n    curDateTime = [curDate, curTime, \"UTC\"].join(\" \");\n    curElevation = [listItems[2].elevation, \" m\"].join(\"\");\n    curCoords = listItems[2].coords\n  }\n  async function perse() {\n    const url =\n      \"https://www.viu-hydromet-wx.ca/webcam_images/get-images-variable.php?stnName=perseverance\";\n    let res = await fetch(url);\n    res = await res.json();\n    $images = res;\n    $numImages = res.length - 1;\n    $slide_id = $numImages;\n    mapComponent.setCenter(listItems[3].coords, 9);\n    currentCam = \"Perseverance\";\n    curDate = [$images[$slide_id].slice(-18, -14), $images[$slide_id].slice(-14, -12), $images[$slide_id].slice(-12, -10)].join(\"-\");\n    curTime = [$images[$slide_id].slice(-10, -8), $images[$slide_id].slice(-8, -6), $images[$slide_id].slice(-6, -4)].join(\":\");\n    curDateTime = [curDate, curTime, \"UTC\"].join(\" \");\n    curElevation = [listItems[3].elevation, \" m\"].join(\"\");\n    curCoords = listItems[3].coords\n  }\n\n  async function cruick() {\n    const url =\n      \"https://www.viu-hydromet-wx.ca/webcam_images/get-images-variable.php?stnName=cruickshank\";\n    let res = await fetch(url);\n    res = await res.json();\n    $images = res;\n    $numImages = res.length - 1;\n    $slide_id = $numImages;\n    mapComponent.setCenter(listItems[4].coords, 9);\n    currentCam = \"Upper Cruickshank\";\n    curDate = [$images[$slide_id].slice(-18, -14), $images[$slide_id].slice(-14, -12), $images[$slide_id].slice(-12, -10)].join(\"-\");\n    curTime = [$images[$slide_id].slice(-10, -8), $images[$slide_id].slice(-8, -6), $images[$slide_id].slice(-6, -4)].join(\":\");\n    curDateTime = [curDate, curTime, \"UTC\"].join(\" \");\n    curElevation = [listItems[4].elevation, \" m\"].join(\"\");\n    curCoords = listItems[4].coords\n  }\n\n  async function skeena() {\n    const url =\n      \"https://www.viu-hydromet-wx.ca/webcam_images/get-images-variable.php?stnName=skeena\";\n    let res = await fetch(url);\n    res = await res.json();\n    $images = res;\n    $numImages = res.length - 1;\n    $slide_id = $numImages;\n    mapComponent.setCenter(listItems[5].coords, 5);\n    currentCam = \"Upper Skeena\";\n    curDate = [$images[$slide_id].slice(-18, -14), $images[$slide_id].slice(-14, -12), $images[$slide_id].slice(-12, -10)].join(\"-\");\n    curTime = [$images[$slide_id].slice(-10, -8), $images[$slide_id].slice(-8, -6), $images[$slide_id].slice(-6, -4)].join(\":\");\n    curDateTime = [curDate, curTime, \"UTC\"].join(\" \");\n    curElevation = [listItems[5].elevation, \" m\"].join(\"\");\n    curCoords = listItems[5].coords\n  }\n</script>\n\n<style>\n .wrapper { \n  /* border : 2px solid #000;  */\n  overflow:hidden;\n  display: block;\n\n}\n\n.wrapper div {\n   min-height: 200px;\n   padding: 10px;\n   /* max-height: 500px; */\n   height:100vh;\n   /* background-color: green; */\n}\n#one {\n  /* background-color: gray; */\n  float:left; \n  /* margin-right:20px; */\n  /* border-right:2px solid #000; */\n  position: relative;\n  padding-bottom: 0%;\n  width:60%;\n  }\n#two { \n  /* background-color: white; */\n  /* padding-top: 100px; */\n  overflow:hidden;\n  margin:10px;\n  /* border:2px dashed #ccc; */\n  min-height:170px;\n  padding-top: 100px;\n  height:70vh;\n  \n}\n\n@media screen and (max-width: 800px) {\n   #one { \n    /* background-color: gray; */\n    overflow: hidden;\n    float: none;\n    width:auto;\n    /* border-bottom:2px solid #000;   */\n    position: relative;\n    padding-bottom:11em;\n    max-height: 100%;\n  }\n  #two { \n  /* background-color: white; */\n  /* padding-top: 100px; */\n  overflow:hidden;\n  /* border:2px dashed #ccc; */\n  min-height:170px;\n  height:40vh;\n  padding-top:0em;\n\n}\n\n  .wrapper div {\n   /* min-height: 200px; */\n   padding: 0px;\n   /* max-height: 500px; */\n   height:60vh;\n   /* background-color: green; */\n}\n}\n@media screen and (max-width: 500px) {\n   #one { \n    /* background-color: gray; */\n    float: none;\n    width:auto;\n    /* border-bottom:2px solid #000;   */\n    position: relative;\n    padding-bottom:1em;\n    max-height: 100%;\n  }\n  #two { \n  /* background-color: white; */\n  /* padding-top: 100px; */\n  overflow:hidden;\n  /* border:2px dashed #ccc; */\n  min-height:170px;\n  height:40vh;\n    padding-top:0em;\n\n}\n\n  .wrapper div {\n   /* min-height: 200px; */\n   padding: 0px;\n   /* max-height: 500px; */\n   height:60vh;\n   /* background-color: green; */\n}\n}\n  .slideshow {\n    margin: auto;\n    height: 100%;\n    max-width: 100%;\n    /* min-width: 100%; */\n    max-height: 70vh;\n  }\n\n  .filename {\n    display: block;\n    word-wrap: break-word;\n    font-size: 2vh;\n  }\n\n  .rangecontainer {\n    display: block;\n    max-width: 100%; /* Width of the outside container */\n  }\n\n  .slider {\n    max-width: 743px;\n    width: 100%; /* Full-width */\n    height: 25px; /* Specified height */\n    background: #d3d3d3; /* Grey background */\n    opacity: 0.7; /* Set transparency (for mouse-over effects on hover) */\n    -webkit-transition: 0.2s; /* 0.2 seconds transition on hover */\n    transition: opacity 0.2s;\n  }\n\n  /* Mouse-over effects */\n  .slider:hover {\n    opacity: 1; /* Fully shown on mouse-over */\n  }\n</style>\n\n<!--Define Header-->\n<div class=\"header\">\n  <a href=\"https://www.viu-hydromet-wx.ca/\" class=\"logo\">\n    <img\n      src=\"images/chrl-logo-text.png\"\n      alt=\"CHRL logo\"\n      style=\"width:250px;height:75x;\" />\n  </a>\n</div>\n\n<div>\n  <button on:click={plum}> Plummer </button>\n\n  <button on:click={klina}> Klinaklini </button>\n\n  <button on:click={homath}> Homathko (webcam down)</button>\n\n  <button on:click={perse}> Perseverance </button>\n\n  <button on:click={cruick}> Cruickshank </button>\n\n  <button on:click={skeena}> Skeena </button>\n\n</div>\n\n<!--Create range slider container with images from user selected station-->\n\n<div class=\"wrapper\">\n  <div id=\"one\">\n      <div class=\"mainimage\">\n      <div class=\"body\" style=\"text-align: center\">\n        <figure class=\"slideshow\">\n          <p class =\"filename\">\n            Station: {currentCam}<br />\n            Coordinates: {curCoords}<br />\n            Elevation: {curElevation}<br />\n            Filename: {$images[$slide_id]}\n          </p>\n          <Image image={$images[$slide_id]} />\n          <div class=\"rangecontainer\">\n            <input\n              bind:value={$slide_id}\n              type=\"range\"\n              min=\"0\"\n              max={$numImages}\n              step=\"1\"\n              class=\"slider\" />\n            <br />\n            <button on:click={prevImage}> Previous </button>\n            <button on:click={nextImage}> Next </button>\n          </div>\n        </figure>\n      </div>\n    </div>\n</div>\n  <div id=\"two\">\n      <Map\n        {accessToken}\n        style=\"mapbox://styles/mapbox/outdoors-v11\"\n        bind:this={mapComponent}\n        on:ready={onReady}>\n        <Marker\n          lat={listItems[0].lat}\n          lng={listItems[0].lon}\n          label={listItems[0].name} />\n        <Marker\n          lat={listItems[1].lat}\n          lng={listItems[1].lon}\n          label={listItems[1].name} />\n        <Marker\n          lat={listItems[2].lat}\n          lng={listItems[2].lon}\n          label={listItems[2].name} />\n        <Marker\n          lat={listItems[3].lat}\n          lng={listItems[3].lon}\n          label={listItems[3].name} />\n        <Marker\n          lat={listItems[4].lat}\n          lng={listItems[4].lon}\n          label={listItems[4].name} />\n        <Marker\n        lat={listItems[5].lat}\n        lng={listItems[5].lon}\n        label={listItems[5].name} />\n      </Map>\n  </div>\n</div>\n"
  ],
  "names": [],
  "mappings": "AAyEE,kBAAI,CACF,OAAO,CAAE,CACX;ACpEA,kBAAI,CACF,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IACV;ACAE,kBAAI,CACQ,SAAS,CAAE,IAAI,CACf,UAAU,CAAE,OACxB;AC0IH,oCAAS,CAER,SAAS,MAAM,CACf,OAAO,CAAE,KAEX,CAEA,sBAAQ,CAAC,iBAAI,CACV,UAAU,CAAE,KAAK,CACjB,OAAO,CAAE,IAAI,CAEb,OAAO,KAEV,CACA,gCAAK,CAEH,MAAM,IAAI,CAGV,QAAQ,CAAE,QAAQ,CAClB,cAAc,CAAE,EAAE,CAClB,MAAM,GACN,CACF,gCAAK,CAGH,SAAS,MAAM,CACf,OAAO,IAAI,CAEX,WAAW,KAAK,CAChB,WAAW,CAAE,KAAK,CAClB,OAAO,IAET,CAEA,OAAO,MAAM,CAAC,GAAG,CAAC,YAAY,KAAK,CAAE,CAClC,gCAAK,CAEJ,QAAQ,CAAE,MAAM,CAChB,KAAK,CAAE,IAAI,CACX,MAAM,IAAI,CAEV,QAAQ,CAAE,QAAQ,CAClB,eAAe,IAAI,CACnB,UAAU,CAAE,IACd,CACA,gCAAK,CAGL,SAAS,MAAM,CAEf,WAAW,KAAK,CAChB,OAAO,IAAI,CACX,YAAY,GAEd,CAEE,sBAAQ,CAAC,iBAAI,CAEZ,OAAO,CAAE,GAAG,CAEZ,OAAO,IAEV,CACA,CACA,OAAO,MAAM,CAAC,GAAG,CAAC,YAAY,KAAK,CAAE,CAClC,gCAAK,CAEJ,KAAK,CAAE,IAAI,CACX,MAAM,IAAI,CAEV,QAAQ,CAAE,QAAQ,CAClB,eAAe,GAAG,CAClB,UAAU,CAAE,IACd,CACA,gCAAK,CAGL,SAAS,MAAM,CAEf,WAAW,KAAK,CAChB,OAAO,IAAI,CACT,YAAY,GAEhB,CAEE,sBAAQ,CAAC,iBAAI,CAEZ,OAAO,CAAE,GAAG,CAEZ,OAAO,IAEV,CACA,CACE,sCAAW,CACT,MAAM,CAAE,IAAI,CACZ,MAAM,CAAE,IAAI,CACZ,SAAS,CAAE,IAAI,CAEf,UAAU,CAAE,IACd,CAEA,qCAAU,CACR,OAAO,CAAE,KAAK,CACd,SAAS,CAAE,UAAU,CACrB,SAAS,CAAE,GACb,CAEA,2CAAgB,CACd,OAAO,CAAE,KAAK,CACd,SAAS,CAAE,IACb,CAEA,mCAAQ,CACN,SAAS,CAAE,KAAK,CAChB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,OAAO,CACnB,OAAO,CAAE,GAAG,CACZ,kBAAkB,CAAE,IAAI,CACxB,UAAU,CAAE,OAAO,CAAC,IACtB,CAGA,mCAAO,MAAO,CACZ,OAAO,CAAE,CACX"
}